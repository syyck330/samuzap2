const axios = require('axios');
const fs = require('fs');
const path = require('path');
const { MessageMedia } = require('whatsapp-web.js');
const {
  addMessage,
  updateUserInfo,
  getFormattedHistory,
  isNewUser,
  loadConversation,
  isInHumanSupport,
  updateClientStatus
} = require('./conversationManager');
const { checkInactivityTimeout, logMessageFlow } = require('./utils');

// Gemini API key - preferencialmente definida em .env
const GEMINI_API_KEY = process.env.GEMINI_API_KEY || 'AIzaSyB-4wC9fIO7Dk8CfMA13731FUUC1BAUNdM';

// Define o endpoint da API Gemini - Atualizado para usar o novo modelo
const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`;

// N√∫mero do telefone do dono da loja para receber notifica√ß√µes de pedidos
const LOJA_PHONE_NUMBER = process.env.NUMERO_DONO_LOJA || '5566999168471'; // N√∫mero do dono da loja com c√≥digo do pa√≠s (55) e DDD (66)

// Lista de produtos dispon√≠veis
const produtosDisponiveis = [
  // Produtos originais (5 primeiros)
  {
    nome: "Vans UltraRange VR3",
    aliases: ["vans", "ultrarange", "vr3", "vans ultrarange", "ultrarange vr3"],
    descricao: "Um dos nossos destaques √© o Vans UltraRange VR3, que est√° em promo√ß√£o!",
    link: "https://wa.me/p/9074540646004838/556699916847",
    imagem: "C:/Users/Syyck/Desktop/Samuzap3/tenis/VANS.png"
  },
  {
    nome: "Adidas Court Silk",
    aliases: ["adidas", "court silk", "court", "silk", "adidas court", "adidas silk"],
    descricao: "Outro destaque √© o ADIDAS F√ìRUM LOW AZUL, que est√° em promo√ß√£o!",
    link: "https://wa.me/p/9691123497565483/556699916847",
    imagem: "C:/Users/Syyck/Desktop/Samuzap3/tenis/ADIDAS.png"
  },
  {
    nome: "Wave Prophecy, Mizuno",
    aliases: ["mizuno", "wave", "prophecy", "wave prophecy", "mizuno wave"],
    descricao: "Tamb√©m temos o MIZUNO BETA MARINHO/CREME com um √≥timo desconto!",
    link: "https://wa.me/p/9523930934311801/556699916847",
    imagem: "C:/Users/Syyck/Desktop/Samuzap3/tenis/MIZUNO.png"
  },
  {
    nome: "Air Force 1, Nike.",
    aliases: ["nike", "air force", "air force 1", "force 1", "air", "force"],
    descricao: "N√£o perca o AIR FORCE BRANCO/CINZA, que est√° em promo√ß√£o!",
    link: "https://wa.me/p/9432479643475856/556699916847",
    imagem: "C:/Users/Syyck/Desktop/Samuzap3/tenis/NIKE.png"
  },
  {
    nome: "Air Jordan 4",
    aliases: ["jordan", "air jordan", "jordan 4", "aj4", "aj 4"],
    descricao: "Por fim, o AIR JORDAN BRANCO/VERDE est√° com um pre√ßo imperd√≠vel!",
    link: "https://wa.me/p/9536849829700700/556699916847",
    imagem: "C:/Users/Syyck/Desktop/Samuzap3/tenis/JORDAN.png"
  },
  // Novos produtos adicionados (todos para identifica√ß√£o por imagem)
  {
    nome: "BOSS Black Suede Sneaker",
    aliases: ["boss", "black suede", "boss black", "suede sneaker"],
    descricao: "Elegante BOSS Black Suede Sneaker dispon√≠vel em nosso cat√°logo!",
    link: "https://wa.me/p/9372098369546213/556699916847",
    imagem: "C:/Users/Syyck/Desktop/Samuzap3/tenis/BOSS_BLACK.jpg"
  },
  {
    nome: "BOSS White Leather Sneaker",
    aliases: ["boss white", "white leather", "leather sneaker"],
    descricao: "Estiloso BOSS White Leather Sneaker dispon√≠vel para entrega!",
    link: "https://wa.me/p/9156277997833658/556699916847",
    imagem: "C:/Users/Syyck/Desktop/Samuzap3/tenis/BOSS_WHITE.jpg"
  },
  {
    nome: "New Balance 9060 Sea Salt",
    aliases: ["new balance", "9060", "sea salt", "new balance 9060"],
    descricao: "Confort√°vel New Balance 9060 Sea Salt em nosso estoque!",
    link: "https://wa.me/p/9531007933649541/556699916847",
    imagem: "C:/Users/Syyck/Desktop/Samuzap3/tenis/NEW_BALANCE.jpg"
  },
  {
    nome: "Mizuno Wave Prophecy X",
    aliases: ["mizuno wave", "prophecy x", "wave prophecy x"],
    descricao: "Tecnol√≥gico Mizuno Wave Prophecy X dispon√≠vel para compra!",
    link: "https://wa.me/p/24160985833491271/556699916847",
    imagem: "C:/Users/Syyck/Desktop/Samuzap3/tenis/MIZUNO_WAVE.jpg"
  },
  {
    nome: "Nike Shox R4",
    aliases: ["nike shox", "shox r4", "nike r4"],
    descricao: "Esportivo Nike Shox R4 com √≥timo desconto!",
    link: "https://wa.me/p/9842617439094972/556699916847",
    imagem: "C:/Users/Syyck/Desktop/Samuzap3/tenis/NIKE_SHOX.jpg"
  },
  {
    nome: "Adidas Daily 3.0",
    aliases: ["adidas daily", "daily 3.0", "adidas 3.0"],
    descricao: "Conforto garantido com o Adidas Daily 3.0!",
    link: "https://wa.me/p/9092018940909998/556699916847",
    imagem: "C:/Users/Syyck/Desktop/Samuzap3/tenis/ADIDAS_DAILY.jpg"
  },
  {
    nome: "Nike Air Max Plus",
    aliases: ["nike air max", "air max plus", "air max"],
    descricao: "Cl√°ssico Nike Air Max Plus em v√°rias cores dispon√≠veis!",
    link: "https://wa.me/p/9777977455546689/556699916847",
    imagem: "C:/Users/Syyck/Desktop/Samuzap3/tenis/NIKE_AIR_MAX.jpg"
  },
  {
    nome: "Nike Air Force 1 Low",
    aliases: ["air force 1 low", "nike force low", "af1 low"],
    descricao: "Estilo atemporal com o Nike Air Force 1 Low!",
    link: "https://wa.me/p/9542621782463651/556699916847",
    imagem: "C:/Users/Syyck/Desktop/Samuzap3/tenis/AIR_FORCE_LOW.jpg"
  }
];

// Fun√ß√£o para selecionar 3 produtos aleat√≥rios para mostrar como novidades
function selecionarProdutosNovidades() {
  // Faz uma c√≥pia do array para n√£o modificar o original
  const todosProdutos = [...produtosDisponiveis];
  
  // Seleciona aleatoriamente 3 produtos
  const produtosSelecionados = [];
  for (let i = 0; i < 3; i++) {
    if (todosProdutos.length === 0) break;
    
    const randomIndex = Math.floor(Math.random() * todosProdutos.length);
    produtosSelecionados.push(todosProdutos[randomIndex]);
    todosProdutos.splice(randomIndex, 1); // Remove o selecionado para n√£o repetir
  }
  
  return produtosSelecionados;
}

// Fun√ß√£o para gerar mensagem de boas-vindas personalizada com menu
async function generateWelcomeMessage(clientName) {
  console.log(`ü§ñ Gerando mensagem de boas-vindas para ${clientName}`);
  return `Ol√°! Bem-vindo(a) *${clientName || 'cliente'}* √† Medeiros Cal√ßados! üòä

Para facilitar seu atendimento, digite o n√∫mero da op√ß√£o desejada:
*1* - Ver Novidades 
*2* - Enviar foto do t√™nis
*3* - Fazer um Pedido  
*4* - Falar com um Atendente`;
}

// Fun√ß√£o para verificar se o cliente est√° em atendimento humano
// e se o tempo de inatividade j√° foi atingido
function checkHumanSupportTimeout(chatId) {
  if (!isInHumanSupport(chatId)) return false;
  
  const conversation = loadConversation(chatId);
  const lastUpdate = conversation.lastUpdated || 0;
  
  // Verifica se passaram 30 minutos desde a √∫ltima atualiza√ß√£o
  const result = checkInactivityTimeout(lastUpdate, 30); // 30 minutos
  if (result) {
    console.log(`‚è±Ô∏è Detectado timeout de inatividade para ${chatId} no atendimento humano`);
  }
  return result;
}

/**
 * Fun√ß√£o para enviar uma notifica√ß√£o de novo pedido para o dono da loja via WhatsApp
 * @param {Object} orderData - Dados do pedido
 * @param {string} clientNumber - N√∫mero de telefone do cliente
 * @param {string} clientName - Nome do cliente
 * @returns {Promise<boolean>} - True se o envio foi bem-sucedido
 */
async function notificarDonoDaLoja(orderData, clientNumber, clientName) {
  try {
    console.log('üì§ ENVIANDO NOTIFICA√á√ÉO AO DONO DA LOJA:');
    
    // Obter n√∫mero do dono da loja da vari√°vel de ambiente ou usar n√∫mero fixo se n√£o estiver configurado
    let numeroDonoLoja = process.env.NUMERO_DONO_LOJA;
    
    // Se o n√∫mero n√£o estiver configurado, usar o n√∫mero fixo
    if (!numeroDonoLoja) {
      numeroDonoLoja = "5566999168471"; // N√∫mero fixo do dono da loja
      console.log(`‚úÖ Usando n√∫mero fixo do dono da loja: ${numeroDonoLoja}`);
    } else {
      console.log(`‚úÖ Usando n√∫mero do dono da loja da vari√°vel de ambiente: ${numeroDonoLoja}`);
    }
    
    // Formata o n√∫mero do cliente para remover o @ do WhatsApp Web
    const clientNumberFormatted = clientNumber.replace('@c.us', '');
    
    // Prepara a mensagem para o dono da loja
    const mensagem = `*NOVO PEDIDO RECEBIDO!* üì¶\n\n` +
                     `*Resumo do pedido:*\n` +
                     `üì¶ Produto: ${orderData.modelo}\n` +
                     `üìè Tamanho: ${orderData.tamanho}\n` +
                     `üé® Cor: ${orderData.cor}\n` +
                     `üì± Contato: ${clientNumberFormatted}\n\n` +
                     `*Cliente:* ${clientName}\n\n` +
                     `"Esta √© uma notifica√ß√£o autom√°tica. N√£o responda a esta mensagem."`;
    
    // Remove qualquer caractere n√£o num√©rico do n√∫mero da loja
    const numeroLojaFormatado = numeroDonoLoja.replace(/\D/g, '');
    
    // Codifica a mensagem para URL
    const mensagemCodificada = encodeURIComponent(mensagem);
    
    // Gera o link do WhatsApp corretamente formatado
    const whatsappLink = `https://api.whatsapp.com/send?phone=${numeroLojaFormatado}&text=${mensagemCodificada}`;
    
    console.log('üîó Link de notifica√ß√£o gerado:', whatsappLink);
    
    // Tentativa de envio via API - REMOVA OU ATUALIZE ESTA PARTE COM SUA API REAL
    try {
      // ATEN√á√ÉO: Esta √© uma API de exemplo (callmebot), substitua pela sua pr√≥pria API
      // Remova ou atualize esta parte conforme sua necessidade
      await axios.get(`https://api.callmebot.com/whatsapp.php?phone=${numeroLojaFormatado}&text=${mensagemCodificada}&apikey=SUA_CHAVE_AQUI`);
      console.log('‚úÖ Notifica√ß√£o enviada via API');
    } catch (apiError) {
      console.log('‚ÑπÔ∏è N√£o foi poss√≠vel enviar via API. Usando link direto:', apiError.message);
    }
    
    // Registra a notifica√ß√£o no log
    logMessageFlow('NOTIFICA√á√ÉO', 'Dono da Loja', mensagem);
    
    // Exporta o link para uso externo tamb√©m (opcional)
    module.exports.lastNotificationLink = whatsappLink;
    
    // Retorna o link para que possa ser usado pelo bot para enviar para o cliente
    return {
      success: true,
      link: whatsappLink,
      message: mensagem
    };
  } catch (error) {
    console.error('‚ùå Erro ao enviar notifica√ß√£o para o dono da loja:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

// Fun√ß√£o para transferir para o atendente humano
async function transferirParaAtendenteHumano(chatId, sendMessageCallback) {
  console.log(`üîÑ Iniciando transfer√™ncia para atendente humano para ${chatId}`);
  
  // Verifica se j√° est√° em atendimento humano
  if (isInHumanSupport(chatId)) {
    console.log(`‚ö†Ô∏è Cliente ${chatId} j√° est√° em atendimento humano, ignorando transfer√™ncia`);
    return;
  }
  
  const mensagem = "Ol√°! Sou o *Samuel*, posso te ajudar com seu pedido?";
  await sendMessageCallback(mensagem);
  logMessageFlow('ENVIADA', chatId, mensagem);
  
  // Atualiza o status do cliente para em_atendimento
  updateClientStatus(chatId, 'em_atendimento');
  
  // Registra no log que o cliente foi transferido para atendimento humano
  console.log(`üë®‚Äçüíº Cliente ${chatId} transferido para atendimento humano`);
}

/**
 * Analisa uma imagem usando a API Gemini
 * @param {string} imagePath - Caminho para o arquivo de imagem
 * @param {string} chatId - Identificador √∫nico do chat
 * @param {Function} sendMessageCallback - Fun√ß√£o para enviar mensagem ao usu√°rio
 * @returns {Promise<boolean>} - True se um produto foi encontrado, false caso contr√°rio
 */
async function analyzeImageWithGemini(imagePath, chatId, sendMessageCallback) {
  try {
    console.log('üñºÔ∏è Analisando imagem com Gemini:', imagePath);
    logMessageFlow('SISTEMA', chatId, `Iniciando an√°lise de imagem: ${imagePath}`);

    // Verifica se o arquivo existe
    if (!fs.existsSync(imagePath)) {
      console.error(`‚ùå Arquivo de imagem n√£o encontrado: ${imagePath}`);
      const errorMsg = "N√£o consegui acessar a imagem. Pode tentar envi√°-la novamente?";
      await sendMessageCallback(errorMsg);
      logMessageFlow('ENVIADA', chatId, errorMsg);
      return false;
    }

    const imageBuffer = fs.readFileSync(imagePath);
    const base64Image = imageBuffer.toString('base64');

    // Verificar se a imagem n√£o est√° vazia
    if (!base64Image || base64Image.length < 100) {
      console.error('‚ùå Imagem inv√°lida ou corrompida');
      const errorMsg = "A imagem parece estar corrompida. Pode tentar enviar outra?";
      await sendMessageCallback(errorMsg);
      logMessageFlow('ENVIADA', chatId, errorMsg);
      return false;
    }

    // Lista de modelos para buscar na imagem
    const nomesModelos = produtosDisponiveis.map(p => p.nome.toLowerCase());
    console.log('üîç Procurando por modelos na imagem:', nomesModelos.join(', '));

    // Criar um texto com os nomes dos produtos dispon√≠veis
    const produtosTexto = produtosDisponiveis.map(p => `- ${p.nome}`).join('\n');

    // Atualizado para usar o modelo gemini-1.5-flash
    const geminiApiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`;

    const requestBody = {
      contents: [
        {
          parts: [
            {
              text: `An√°lise detalhada desta imagem de t√™nis:
1. Descreva detalhadamente o t√™nis que voc√™ est√° vendo (marca, modelo, cores, caracter√≠sticas).
2. Determine se o t√™nis mostrado corresponde a algum dos modelos a seguir:
${produtosTexto}

Se for um dos modelos listados, inclua a frase "MODELO_IDENTIFICADO: [Nome exato do modelo]" no in√≠cio da sua resposta.
Se n√£o for um dos modelos listados, inclua "MODELO_N√ÉO_IDENTIFICADO" no in√≠cio da sua resposta.

Forne√ßa uma descri√ß√£o detalhada independentemente de ser um modelo listado ou n√£o.`
            },
            {
              inlineData: {
                mimeType: "image/jpeg",
                data: base64Image
              }
            }
          ]
        }
      ],
      generationConfig: {
        temperature: 0.2,
        maxOutputTokens: 800
      }
    };

    console.log('üîÑ Enviando imagem para an√°lise...');
    logMessageFlow('SISTEMA', chatId, 'Enviando imagem para API Gemini');
    
    const response = await axios.post(geminiApiUrl, requestBody, {
      headers: {
        'Content-Type': 'application/json'
      },
      timeout: 30000 // 30 segundos
    });

    if (response.data?.candidates?.[0]?.content?.parts?.[0]?.text) {
      const analysisResult = response.data.candidates[0].content.parts[0].text;
      console.log('üìã An√°lise completa da imagem:', analysisResult.substring(0, 200) + '...');
      logMessageFlow('SISTEMA', chatId, `Resultado da an√°lise recebido (${analysisResult.length} caracteres)`);
      
      // Verificar se a resposta indica que identificou algum modelo
      let produtoEncontrado = null;
      
      if (analysisResult.includes('MODELO_IDENTIFICADO:')) {
        // Extrair o nome do modelo da resposta
        const modeloMatch = analysisResult.match(/MODELO_IDENTIFICADO:\s*([^\n]+)/);
        
        if (modeloMatch && modeloMatch[1]) {
          const modeloIdentificado = modeloMatch[1].trim();
          console.log('‚úÖ Modelo identificado na an√°lise:', modeloIdentificado);
          logMessageFlow('SISTEMA', chatId, `Modelo identificado: ${modeloIdentificado}`);
          
          // Verificar qual produto foi encontrado
          for (const produto of produtosDisponiveis) {
            if (modeloIdentificado.toLowerCase().includes(produto.nome.toLowerCase()) || 
                produto.aliases.some(alias => modeloIdentificado.toLowerCase().includes(alias.toLowerCase()))) {
              produtoEncontrado = produto;
              break;
            }
          }
        }
      } else {
        console.log('‚ùå Nenhum modelo identificado explicitamente');
        logMessageFlow('SISTEMA', chatId, 'Nenhum modelo identificado explicitamente');
        
        // Verifica√ß√£o alternativa de termos na descri√ß√£o
        for (const produto of produtosDisponiveis) {
          // Verificar o nome principal
          if (analysisResult.toLowerCase().includes(produto.nome.toLowerCase())) {
            produtoEncontrado = produto;
            console.log('üîç Encontrado por men√ß√£o ao nome:', produto.nome);
            logMessageFlow('SISTEMA', chatId, `Produto identificado por men√ß√£o ao nome: ${produto.nome}`);
            break;
          }
          
          // Verificar aliases
          for (const alias of produto.aliases) {
            if (analysisResult.toLowerCase().includes(alias.toLowerCase())) {
              produtoEncontrado = produto;
              console.log('üîç Encontrado por men√ß√£o ao alias:', alias);
              logMessageFlow('SISTEMA', chatId, `Produto identificado por men√ß√£o ao alias: ${alias}`);
              break;
            }
          }
          
          if (produtoEncontrado) break;
        }
      }
      
      if (produtoEncontrado) {
        const mensagemCliente = `T√™nis ${produtoEncontrado.nome} identificado. Dispon√≠vel em estoque! Confira no cat√°logo: ${produtoEncontrado.link}`;
        console.log('‚úÖ Produto encontrado em estoque:', produtoEncontrado.nome);
        await sendMessageCallback(mensagemCliente);
        logMessageFlow('ENVIADA', chatId, mensagemCliente);
        return true;
      } else {
        const mensagemCliente = "Infelizmente, n√£o temos esse produto no estoque. Deseja ver outros modelos dispon√≠veis?";
        console.log('‚ùå Produto n√£o encontrado no estoque');
        await sendMessageCallback(mensagemCliente);
        logMessageFlow('ENVIADA', chatId, mensagemCliente);
        return false;
      }
    } else {
      console.log('‚ö†Ô∏è Resposta inv√°lida da API Gemini:', JSON.stringify(response.data, null, 2));
      const errorMessage = "N√£o consegui analisar a imagem. Pode tentar enviar uma foto mais clara do t√™nis?";
      await sendMessageCallback(errorMessage);
      logMessageFlow('ENVIADA', chatId, errorMessage);
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erro ao analisar imagem com Gemini:', error);
    logMessageFlow('ERRO', chatId, `Erro ao analisar imagem: ${error.message}`);

    if (error.response) {
      console.error('Detalhes do erro:', error.response.status, error.response.data);
      logMessageFlow('ERRO', chatId, `Detalhes do erro API: ${error.response.status}`);
    }

    const errorMessage = "Ocorreu um erro ao analisar a imagem. Pode tentar enviar uma nova foto ou descrever o t√™nis que est√° procurando?";
    await sendMessageCallback(errorMessage);
    logMessageFlow('ENVIADA', chatId, errorMessage);
    return false;
  }
}

/**
 * Processa a op√ß√£o 1 (Ver Novidades) enviando produtos um a um sequencialmente
 * @param {string} chatId - Identificador √∫nico do chat
 * @param {Function} sendMessageCallback - Fun√ß√£o para enviar mensagem ao usu√°rio
 */
async function processNovidades(chatId, sendMessageCallback) {
  try {
    console.log('üè¨ Processando op√ß√£o Ver Novidades para chatId:', chatId);
    logMessageFlow('SISTEMA', chatId, 'Iniciando envio de cat√°logo de produtos');
    
    // Seleciona apenas 3 produtos aleatoriamente
    const produtosParaMostrar = selecionarProdutosNovidades();
    
    for (const produto of produtosParaMostrar) {
      try {
        // Verifica se o caminho da imagem existe
        if (fs.existsSync(produto.imagem)) {
          // Envia a imagem do produto
          const media = MessageMedia.fromFilePath(produto.imagem);
          await sendMessageCallback(media);
          console.log(`üì§ Enviando imagem do produto ${produto.nome} para ${chatId}`);
          logMessageFlow('SISTEMA', chatId, `Enviando imagem: ${produto.nome}`);
          
          // Aguarda um pouco antes de enviar a descri√ß√£o
          await new Promise(resolve => setTimeout(resolve, 500));
          
          // Envia a descri√ß√£o e o link do produto
          const descricaoProduto = `${produto.descricao}\nConfira aqui: ${produto.link}`;
          await sendMessageCallback(descricaoProduto);
          logMessageFlow('ENVIADA', chatId, descricaoProduto);
          
          // Aguarda um pouco antes de enviar o pr√≥ximo produto
          await new Promise(resolve => setTimeout(resolve, 1500)); // 1.5 segundos
        } else {
          console.error(`‚ùå Imagem n√£o encontrada: ${produto.imagem}`);
          logMessageFlow('ERRO', chatId, `Imagem n√£o encontrada: ${produto.imagem}`);
          await sendMessageCallback(`${produto.descricao}\nConfira aqui: ${produto.link}`);
          logMessageFlow('ENVIADA', chatId, `${produto.descricao}\nConfira aqui: ${produto.link}`);
        }
      } catch (error) {
        console.error(`‚ùå Erro ao processar produto ${produto.nome}:`, error);
        logMessageFlow('ERRO', chatId, `Erro ao processar produto ${produto.nome}: ${error.message}`);
        // Tenta enviar apenas o texto se a imagem falhar
        await sendMessageCallback(`${produto.descricao}\nConfira aqui: ${produto.link}`);
        logMessageFlow('ENVIADA', chatId, `${produto.descricao}\nConfira aqui: ${produto.link}`);
      }
    }
    
    // Nova mensagem ap√≥s mostrar os produtos selecionados
    // Usando n√∫meros 1 e 0 para as op√ß√µes
    const finalMessage = `Estes s√£o alguns dos nossos destaques do momento! Gostou de algum modelo?  
‚û°Ô∏è Digite *1* para falar com um atendente.   
‚û°Ô∏è Digite *0* para voltar ao menu inicial.   

Caso queira mais op√ß√µes ou buscar um modelo espec√≠fico, posso te ajudar com isso tamb√©m! üòä`;

    await sendMessageCallback(finalMessage);
    logMessageFlow('ENVIADA', chatId, finalMessage);
    
    // Atualiza o estado do usu√°rio para indicar que est√° no submenu de novidades
    updateUserInfo(chatId, 'currentState', 'novidades_submenu');
    
    console.log(`‚úÖ Cat√°logo enviado com sucesso para ${chatId}`);
    logMessageFlow('SISTEMA', chatId, 'Cat√°logo enviado com sucesso');
    return true; // Indica que o processamento foi conclu√≠do com sucesso
    
  } catch (error) {
    console.error('‚ùå Erro ao processar novidades:', error);
    logMessageFlow('ERRO', chatId, `Erro ao processar novidades: ${error.message}`);
    const errorMsg = "Desculpe, tive um problema ao mostrar as novidades. Pode tentar novamente?";
    await sendMessageCallback(errorMsg);
    logMessageFlow('ENVIADA', chatId, errorMsg);
    return false;
  }
}

/**
 * Fun√ß√£o para processar respostas do submenu de novidades
 * @param {string} chatId - ID do chat do cliente
 * @param {string} mensagem - Texto da mensagem do usu√°rio
 * @param {Function} sendMessageCallback - Fun√ß√£o para enviar mensagem ao usu√°rio
 * @returns {Promise<boolean>} - True se a mensagem foi processada dentro do submenu
 */
async function processarSubmenuNovidades(chatId, mensagem, sendMessageCallback) {
  const texto = mensagem.toLowerCase().trim();
  
  // Verifica se o cliente est√° no submenu de novidades
  const conversation = loadConversation(chatId);
  if (conversation.userInfo.currentState !== 'novidades_submenu') {
    return false; // N√£o est√° no submenu de novidades
  }
  
  console.log(`üîÑ Processando resposta do submenu de novidades: "${texto}" para ${chatId}`);
  
  if (texto === '1') {
    // Op√ß√£o para falar com atendente
    await transferirParaAtendenteHumano(chatId, sendMessageCallback);
    // Resetar o estado do cliente ap√≥s transfer√™ncia
    updateUserInfo(chatId, 'currentState', null);
    return true;
  } else if (texto === '0') {
    // Op√ß√£o para voltar ao menu inicial
    const clientName = conversation.userInfo.name || 'cliente';
    const menuMessage = await generateWelcomeMessage(clientName);
    
    await sendMessageCallback(menuMessage);
    logMessageFlow('ENVIADA', chatId, menuMessage);
    
    // Resetar o estado do cliente
    updateUserInfo(chatId, 'currentState', null);
    return true;
  }
  
  // Se chegou aqui, a mensagem n√£o corresponde a nenhuma op√ß√£o do submenu
  const ajudaMsg = "Por favor, escolha uma op√ß√£o v√°lida:\n" +
                  "‚û°Ô∏è *1* para falar com um atendente.\n" +
                  "‚û°Ô∏è *0* para voltar ao menu inicial.";
  
  await sendMessageCallback(ajudaMsg);
  logMessageFlow('ENVIADA', chatId, ajudaMsg);
  return true;
}

/**
 * Processa a op√ß√£o 3 (Fazer um Pedido) com fluxo de perguntas sequenciais
 * @param {string} chatId - Identificador √∫nico do chat
 * @param {Function} sendMessageCallback - Fun√ß√£o para enviar mensagem ao usu√°rio
 * @param {string|null} currentResponse - Resposta atual do cliente, se houver
 * @returns {Promise<boolean>} - True se o processamento foi conclu√≠do com sucesso
 */
async function processarPedido(chatId, sendMessageCallback, currentResponse = null) {
  try {
    console.log('üõí Processando pedido para chatId:', chatId);
    logMessageFlow('SISTEMA', chatId, 'Processando pedido');
    
    const conversation = loadConversation(chatId);
    const orderData = conversation.userInfo.orderData || {};
    const orderStep = conversation.userInfo.orderStep || 'inicio';
    
    // Se h√° uma resposta do usu√°rio, processamos conforme a etapa atual
    if (currentResponse) {
      switch(orderStep) {
        case 'inicio':
          // Pula direto para a sele√ß√£o do modelo
          updateUserInfo(chatId, 'orderStep', 'modelo');
          
          const modeloMsg = "Por favor, informe o modelo do t√™nis que voc√™ deseja comprar:";
          await sendMessageCallback(modeloMsg);
          logMessageFlow('ENVIADA', chatId, modeloMsg);
          return true;
          
        case 'modelo':
          // Usu√°rio est√° informando o modelo manualmente
          orderData.modelo = currentResponse;
          updateUserInfo(chatId, 'orderData', orderData);
          updateUserInfo(chatId, 'orderStep', 'tamanho');
          
          const tamanhoMsg = "Qual tamanho voc√™ deseja?";
          await sendMessageCallback(tamanhoMsg);
          logMessageFlow('ENVIADA', chatId, tamanhoMsg);
          return true;
          
        case 'tamanho':
          orderData.tamanho = currentResponse;
          updateUserInfo(chatId, 'orderData', orderData);
          updateUserInfo(chatId, 'orderStep', 'cor');
          
          const corMsg = "Qual cor voc√™ prefere?";
          await sendMessageCallback(corMsg);
          logMessageFlow('ENVIADA', chatId, corMsg);
          return true;
          
        case 'cor':
          orderData.cor = currentResponse;
          updateUserInfo(chatId, 'orderData', orderData);
          
          // Obter o nome do cliente
          const clientName = conversation.userInfo.name || 'Cliente';
          
          // Enviar notifica√ß√£o ao dono da loja
          const notificacao = await notificarDonoDaLoja(orderData, chatId, clientName);
          
          if (notificacao.success) {
            console.log('‚úÖ Notifica√ß√£o enviada com sucesso ao dono da loja');
          } else {
            console.error('‚ùå Falha ao notificar dono da loja:', notificacao.error);
          }
          
          // Montando o resumo simplificado do pedido
          const resumoMsg = `*Resumo do seu pedido:*\n\n` +
                           `üì¶ *Produto:* ${orderData.modelo}\n` +
                           `üìè *Tamanho:* ${orderData.tamanho}\n` +
                           `üé® *Cor:* ${orderData.cor}\n\n` +
                           `Seu pedido foi registrado com sucesso! Um atendente entrar√° em contato em breve.`;
          
          await sendMessageCallback(resumoMsg);
          logMessageFlow('ENVIADA', chatId, resumoMsg);
          
          // Aguarda um pouco antes da transfer√™ncia
          await new Promise(resolve => setTimeout(resolve, 1500));
          
          // Reseta o fluxo de pedido ap√≥s transfer√™ncia
          updateUserInfo(chatId, 'orderStep', null);
          
          // Transfere o cliente para atendimento humano
          await transferirParaAtendenteHumano(chatId, sendMessageCallback);
          return true;
      }
    } else {
      // Inicia o processo de pedido (primeira intera√ß√£o)
      updateUserInfo(chatId, 'orderStep', 'inicio');
      updateUserInfo(chatId, 'orderData', {});
      
      // Ir diretamente para perguntar o modelo
      const modeloMsg = "Por favor, informe o modelo do t√™nis que voc√™ deseja comprar:";
      await sendMessageCallback(modeloMsg);
      logMessageFlow('ENVIADA', chatId, modeloMsg);
      updateUserInfo(chatId, 'orderStep', 'modelo');
      return true;
    }
    
    return false; // N√£o deveria chegar aqui
    
  } catch (error) {
    console.error('‚ùå Erro ao processar pedido:', error);
    logMessageFlow('ERRO', chatId, `Erro ao processar pedido: ${error.message}`);
    
    // Envia mensagem de erro e reinicia o fluxo
    const errorMsg = "Desculpe, ocorreu um erro ao processar seu pedido. Vamos recome√ßar.";
    await sendMessageCallback(errorMsg);
    logMessageFlow('ENVIADA', chatId, errorMsg);
    
    // Reinicia o fluxo
    updateUserInfo(chatId, 'orderStep', null);
    
    return false;
  }
}

/**
 * Fun√ß√£o para verificar se a pergunta do usu√°rio √© sobre estoque
 * @param {string} mensagem - Mensagem do usu√°rio
 * @returns {boolean} - True se a pergunta for sobre estoque
 */
function isPerguntaEstoque(mensagem) {
  const textoDaPergunta = mensagem.toLowerCase();
  
  // Lista de palavras-chave relacionadas a perguntas de estoque
  const palavrasEstoque = ['tem', 'dispon√≠vel', 'disponivel', 'estoque', 'disponibilidade', 
                          'quando chega', 'chegou', 'vai chegar', 'em falta'];
  
  // Verificar se a pergunta cont√©m palavras relacionadas a estoque
  return palavrasEstoque.some(palavra => textoDaPergunta.includes(palavra));
}

/**
 * Verifica se um cliente est√° no submenu de novidades
 * @param {string} chatId - ID do chat do cliente
 * @returns {boolean} - True se o cliente estiver no submenu de novidades
 */
function isInNovidadesSubmenu(chatId) {
  try {
    const conversation = loadConversation(chatId);
    return conversation?.userInfo?.currentState === 'novidades_submenu';
  } catch (error) {
    console.error('‚ùå Erro ao verificar se est√° no submenu de novidades:', error);
    return false;
  }
}

/**
 * Processa op√ß√µes do submenu de novidades
 * @param {string} chatId - ID do chat
 * @param {string} option - Op√ß√£o selecionada no submenu
 * @param {function} sendMessageCallback - Fun√ß√£o para enviar mensagem
 * @param {string} clientName - Nome do cliente
 */
async function processNovidadesSubmenu(chatId, option, sendMessageCallback, clientName) {
  try {
    logMessageFlow('SISTEMA', chatId, `Processando op√ß√£o ${option} do submenu de novidades`);
    
    if (option === '1') {
      // Transferir para atendente humano
      console.log(`üîÑ Cliente ${chatId} solicitou falar com atendente ap√≥s ver novidades`);
      await transferirParaAtendenteHumano(chatId, sendMessageCallback);
      
      // Limpa o estado de submenu ap√≥s a transfer√™ncia
      updateUserInfo(chatId, 'currentState', null);
      return true;
    } else if (option === '0') {
      // Voltar ao menu principal
      console.log(`üîÑ Cliente ${chatId} solicitou voltar ao menu principal ap√≥s ver novidades`);
      const welcomeMessage = await generateWelcomeMessage(clientName);
      await sendMessageCallback(welcomeMessage);
      
      // Limpa o estado de submenu ap√≥s enviar o menu principal
      updateUserInfo(chatId, 'currentState', null);
      return true;
    }
    
    return false;
  } catch (error) {
    console.error('‚ùå Erro ao processar submenu de novidades:', error);
    logMessageFlow('ERRO', chatId, `Erro ao processar submenu de novidades: ${error.message}`);
    return false;
  }
}

// Exporta as fun√ß√µes
module.exports = {
  generateWelcomeMessage,
  analyzeImageWithGemini,
  processNovidades,
  processarSubmenuNovidades,
  checkHumanSupportTimeout,
  transferirParaAtendenteHumano,
  processarPedido,
  notificarDonoDaLoja,
  isPerguntaEstoque,
  isInNovidadesSubmenu,
  processNovidadesSubmenu
};
